Ex 5.1
class:                object:  
Superhero             Superman
Person                Justin
Pet                   Rover
Magazine              Time
Holiday               Christmas

Ex 5.2
length           set length
height           set height
size             set size

Ex 5.3
room             set room
people           set size
time             set time

Ex 5.4
hours            set hours
instractor       set instractor
courseName       set courseName

Ex 5.5

Ex 5.6
    public void lyrics(){
        System.out.println("This is the lyrics");
    }

Ex 5.7
    public int cube(int n){
        int result = n * n * n;
        return result;
    }

Ex 5.8
    public int random100(){
        int result = (int)(Math.random() * 100) +1;
        return result;
    }

Ex 5.9
    public int randonInRange(int n1, int n2){
        int result = (int)(Math.random() * n2 + 1) + n1;
        return result;
    }

Ex 5.10
    public void powerOfTwo(){
        int result = 0;
        for (int i = 2; i < 12; i++){
            result = i * i;
            System.out.println(result);
        }

    }

Ex 5.11
    public void alarm(int times){
        if(times < 1){
            System.out.println("Error");
        }
        while(times > 1){
            times--;
            System.out.println("Alarm")
        }
    }

Ex 5.12
    public int sum100(int n){
            int sum = 0;
            while(n <= 100){
                sum += n;
                n++;
            }
            return sum;
        }

Ex 5.13
    public maxOfTwo(int n1, int n2){
        if(n1 > n2){
            return n1;
        }
        else if (n2 > n1){
            return n2;
        }
        else {
            return "Its tie";
        }
    }

Ex 5.14
    public String sumRange(int n1, int n2){
        if(n2 < n1){
            return 0 + " Error";
        }

        int sum = 0;
        while(n1 <= n2;){
            sum += n1;
            n1++;
        }
        return String.valueOf(sum);
    }

Ex 5.15
    public boolean larger(double n1, double n2){
        return (n1 > n2);
    }
    
Ex 5.16
    public String countA(String sentence){
        int count = 0;
        for(int i = 0; i < sentence.length(); i++){
            if (sentence.charAt(i) == 'A') {
                count++;
            }
        }
        return count + " times";
    }
    
Ex 5.17
    public boolean evenlyDivisible(int n1, int n2){
        if (n1 == 0 || n2 == 0){
            return false;
        }
        else if(n1 % n2 == 0 || n2 % n1 == 0){
            return true;
        }
        else {
            return false;
        }
    }
    
Ex 5.18
    public boolean isAlpha(char a){
        return (Character.isLetter(a));
    }
    
Ex 5.19
    public boolean floatEquals(float n1, float n2, float within){
        return (Math.abs(n1 - n2) <= within);
    }

Ex 5.20
    public String reverse(String n){
        String result = "";
        for(int i = n.length()-1; i >= 0; i--){
            result += n.charAt(i);
        }
        return result;
    }

Ex 5.21
    public boolean isIsosceles(int n1, int n2, int n3){
        if ((n1 == n2 || n1 == n3 || n2 == n3) && ((n1 + n2 +n3) % 3 != 0)) {
            return true;
        }
        else{
            return false;
        }
    }
    
Ex 5.22
    public float average(int n1, int n2){
        float result = (float)(n1 + n2) / 2;
        return result;
    }
    
Ex 5.23
    public float average(int n1, int n2, int n3){
        float result = (float)(n1 + n2 + n3) / 3;
        return result;
    }

Ex 5.24
    public float average(int n1, int n2, int n3, int n4){
        float result = (float)(n1 + n2 + n3 + n4) / 4;
        return result;
    }

Ex 5.25
    public String multiConcat(String n1, int n2){
        if (n2 < 2){
            return n1;
        }
        String result;
        for (int i = 0; n2 >= 1; n2--){
            System.out.print(n1);
        }
        return "";
    }
    
Ex 5.26
     public String multiConcat(String n1){
        System.out.print(n1 + n1);
        return "";
    }
    
Ex 5.27
    A primitive type uses a small amount of memory repersent a single item,
    such is (int, short, long,....)
    An object is a large memory that can contain a great deal of data along with method to process the data.
    
Ex 5.28
    Static method can not refer to an instance variable because instance variable dont exist until an object exist.
    A static method can only reference static variable or local variable.

Ex 5.29
    A class repersent a group of object with same behaviors, we can instantiate as many of each object needed.
